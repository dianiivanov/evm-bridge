/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BridgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addClaim"
      | "addRelease"
      | "baseToWrapperToken"
      | "burn"
      | "claim"
      | "claimableFor"
      | "lock"
      | "owner"
      | "releasableFor"
      | "release"
      | "renounceOwnership"
      | "transferOwnership"
      | "wrapperToBaseToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "TokenBurned"
      | "TokenClaimed"
      | "TokenLocked"
      | "TokenReleased"
      | "TokensToBeClaimedAdded"
      | "TokensToBeReleasedAdded"
      | "WrapperTokenCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addClaim",
    values: [AddressLike, AddressLike, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addRelease",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "baseToWrapperToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableFor",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releasableFor",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapperToBaseToken",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addRelease", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseToWrapperToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releasableFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapperToBaseToken",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenBurnedEvent {
  export type InputTuple = [
    amountOwner: AddressLike,
    sourceTokenAddress: AddressLike,
    burnedTokenAddress: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    amountOwner: string,
    sourceTokenAddress: string,
    burnedTokenAddress: string,
    amount: bigint
  ];
  export interface OutputObject {
    amountOwner: string;
    sourceTokenAddress: string;
    burnedTokenAddress: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenClaimedEvent {
  export type InputTuple = [
    amountOwner: AddressLike,
    sourceTokenAddress: AddressLike,
    claimedTokenAddress: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    amountOwner: string,
    sourceTokenAddress: string,
    claimedTokenAddress: string,
    amount: bigint
  ];
  export interface OutputObject {
    amountOwner: string;
    sourceTokenAddress: string;
    claimedTokenAddress: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenLockedEvent {
  export type InputTuple = [
    amountOwner: AddressLike,
    lockedTokenAddress: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    amountOwner: string,
    lockedTokenAddress: string,
    amount: bigint
  ];
  export interface OutputObject {
    amountOwner: string;
    lockedTokenAddress: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenReleasedEvent {
  export type InputTuple = [
    amountOwner: AddressLike,
    releasedTokenAddress: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    amountOwner: string,
    releasedTokenAddress: string,
    amount: bigint
  ];
  export interface OutputObject {
    amountOwner: string;
    releasedTokenAddress: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensToBeClaimedAddedEvent {
  export type InputTuple = [
    tokensOwnerAddress: AddressLike,
    sourceTokenAddress: AddressLike,
    amountAdded: BigNumberish,
    newAmount: BigNumberish
  ];
  export type OutputTuple = [
    tokensOwnerAddress: string,
    sourceTokenAddress: string,
    amountAdded: bigint,
    newAmount: bigint
  ];
  export interface OutputObject {
    tokensOwnerAddress: string;
    sourceTokenAddress: string;
    amountAdded: bigint;
    newAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensToBeReleasedAddedEvent {
  export type InputTuple = [
    tokensOwnerAddress: AddressLike,
    sourceTokenAddress: AddressLike,
    amountAdded: BigNumberish,
    newAmount: BigNumberish
  ];
  export type OutputTuple = [
    tokensOwnerAddress: string,
    sourceTokenAddress: string,
    amountAdded: bigint,
    newAmount: bigint
  ];
  export interface OutputObject {
    tokensOwnerAddress: string;
    sourceTokenAddress: string;
    amountAdded: bigint;
    newAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WrapperTokenCreatedEvent {
  export type InputTuple = [
    sourceTokenAddress: AddressLike,
    targetTokenAddress: AddressLike
  ];
  export type OutputTuple = [
    sourceTokenAddress: string,
    targetTokenAddress: string
  ];
  export interface OutputObject {
    sourceTokenAddress: string;
    targetTokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Bridge extends BaseContract {
  connect(runner?: ContractRunner | null): Bridge;
  waitForDeployment(): Promise<this>;

  interface: BridgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addClaim: TypedContractMethod<
    [
      tokensOwner: AddressLike,
      sourceTokenAddress: AddressLike,
      amount: BigNumberish,
      sourceTokenName: string,
      sourceTokenSymbol: string
    ],
    [void],
    "nonpayable"
  >;

  addRelease: TypedContractMethod<
    [tokensOwner: AddressLike, tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  baseToWrapperToken: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  burn: TypedContractMethod<
    [wrapperTokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<
    [wrapperTokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimableFor: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  lock: TypedContractMethod<
    [
      tokenAddress: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  releasableFor: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  release: TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  wrapperToBaseToken: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addClaim"
  ): TypedContractMethod<
    [
      tokensOwner: AddressLike,
      sourceTokenAddress: AddressLike,
      amount: BigNumberish,
      sourceTokenName: string,
      sourceTokenSymbol: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addRelease"
  ): TypedContractMethod<
    [tokensOwner: AddressLike, tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "baseToWrapperToken"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [wrapperTokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [wrapperTokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimableFor"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "lock"
  ): TypedContractMethod<
    [
      tokenAddress: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "releasableFor"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "release"
  ): TypedContractMethod<
    [tokenAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "wrapperToBaseToken"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokenBurned"
  ): TypedContractEvent<
    TokenBurnedEvent.InputTuple,
    TokenBurnedEvent.OutputTuple,
    TokenBurnedEvent.OutputObject
  >;
  getEvent(
    key: "TokenClaimed"
  ): TypedContractEvent<
    TokenClaimedEvent.InputTuple,
    TokenClaimedEvent.OutputTuple,
    TokenClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TokenLocked"
  ): TypedContractEvent<
    TokenLockedEvent.InputTuple,
    TokenLockedEvent.OutputTuple,
    TokenLockedEvent.OutputObject
  >;
  getEvent(
    key: "TokenReleased"
  ): TypedContractEvent<
    TokenReleasedEvent.InputTuple,
    TokenReleasedEvent.OutputTuple,
    TokenReleasedEvent.OutputObject
  >;
  getEvent(
    key: "TokensToBeClaimedAdded"
  ): TypedContractEvent<
    TokensToBeClaimedAddedEvent.InputTuple,
    TokensToBeClaimedAddedEvent.OutputTuple,
    TokensToBeClaimedAddedEvent.OutputObject
  >;
  getEvent(
    key: "TokensToBeReleasedAdded"
  ): TypedContractEvent<
    TokensToBeReleasedAddedEvent.InputTuple,
    TokensToBeReleasedAddedEvent.OutputTuple,
    TokensToBeReleasedAddedEvent.OutputObject
  >;
  getEvent(
    key: "WrapperTokenCreated"
  ): TypedContractEvent<
    WrapperTokenCreatedEvent.InputTuple,
    WrapperTokenCreatedEvent.OutputTuple,
    WrapperTokenCreatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokenBurned(address,address,address,uint256)": TypedContractEvent<
      TokenBurnedEvent.InputTuple,
      TokenBurnedEvent.OutputTuple,
      TokenBurnedEvent.OutputObject
    >;
    TokenBurned: TypedContractEvent<
      TokenBurnedEvent.InputTuple,
      TokenBurnedEvent.OutputTuple,
      TokenBurnedEvent.OutputObject
    >;

    "TokenClaimed(address,address,address,uint256)": TypedContractEvent<
      TokenClaimedEvent.InputTuple,
      TokenClaimedEvent.OutputTuple,
      TokenClaimedEvent.OutputObject
    >;
    TokenClaimed: TypedContractEvent<
      TokenClaimedEvent.InputTuple,
      TokenClaimedEvent.OutputTuple,
      TokenClaimedEvent.OutputObject
    >;

    "TokenLocked(address,address,uint256)": TypedContractEvent<
      TokenLockedEvent.InputTuple,
      TokenLockedEvent.OutputTuple,
      TokenLockedEvent.OutputObject
    >;
    TokenLocked: TypedContractEvent<
      TokenLockedEvent.InputTuple,
      TokenLockedEvent.OutputTuple,
      TokenLockedEvent.OutputObject
    >;

    "TokenReleased(address,address,uint256)": TypedContractEvent<
      TokenReleasedEvent.InputTuple,
      TokenReleasedEvent.OutputTuple,
      TokenReleasedEvent.OutputObject
    >;
    TokenReleased: TypedContractEvent<
      TokenReleasedEvent.InputTuple,
      TokenReleasedEvent.OutputTuple,
      TokenReleasedEvent.OutputObject
    >;

    "TokensToBeClaimedAdded(address,address,uint256,uint256)": TypedContractEvent<
      TokensToBeClaimedAddedEvent.InputTuple,
      TokensToBeClaimedAddedEvent.OutputTuple,
      TokensToBeClaimedAddedEvent.OutputObject
    >;
    TokensToBeClaimedAdded: TypedContractEvent<
      TokensToBeClaimedAddedEvent.InputTuple,
      TokensToBeClaimedAddedEvent.OutputTuple,
      TokensToBeClaimedAddedEvent.OutputObject
    >;

    "TokensToBeReleasedAdded(address,address,uint256,uint256)": TypedContractEvent<
      TokensToBeReleasedAddedEvent.InputTuple,
      TokensToBeReleasedAddedEvent.OutputTuple,
      TokensToBeReleasedAddedEvent.OutputObject
    >;
    TokensToBeReleasedAdded: TypedContractEvent<
      TokensToBeReleasedAddedEvent.InputTuple,
      TokensToBeReleasedAddedEvent.OutputTuple,
      TokensToBeReleasedAddedEvent.OutputObject
    >;

    "WrapperTokenCreated(address,address)": TypedContractEvent<
      WrapperTokenCreatedEvent.InputTuple,
      WrapperTokenCreatedEvent.OutputTuple,
      WrapperTokenCreatedEvent.OutputObject
    >;
    WrapperTokenCreated: TypedContractEvent<
      WrapperTokenCreatedEvent.InputTuple,
      WrapperTokenCreatedEvent.OutputTuple,
      WrapperTokenCreatedEvent.OutputObject
    >;
  };
}
